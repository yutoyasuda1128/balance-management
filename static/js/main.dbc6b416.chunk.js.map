{"version":3,"sources":["ModalWindow.jsx","Calendar.jsx","reportWebVitals.js","index.js"],"names":["ModalWindow","props","dt","useState","price","setPrice","category","setCategory","className","date","getFullYear","getMonth","slice","getDate","onClick","obj","type","window","localStorage","setItem","JSON","stringify","onChange","e","target","value","placeholder","disabled","onClose","AppCalendar","Date","dateObj","setDateObj","show","setShow","setDate","onClickDay","event","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAUO,SAASA,EAAYC,GAAO,IANfC,EAMc,EACNC,mBAAS,GADH,mBACzBC,EADyB,KAClBC,EADkB,OAMAF,mBAAS,IANT,mBAMzBG,EANyB,KAMfC,EANe,KAqBhC,OACE,sBAAKC,UAAU,sBAAf,UACE,sBAAKA,UAAU,yBAAf,WA7BcN,EA6BuCD,EAAMQ,KA5BrDP,EAAGQ,cAGD,KAFD,MAAQR,EAAGS,WAAW,IAAIC,OAAO,GAEtB,KADX,KAAOV,EAAGW,WAAWD,OAAO,IA0BnC,SACC,sBAAKJ,UAAU,oBAAf,UACG,wBAAQM,QAdQ,WACtB,IAAMC,EAAM,CACVC,KAAM,UACNZ,QACAE,YAGFW,OAAOC,aAAaC,QAAQ,qBAAsBC,KAAKC,UAAU,CAACN,MAO5D,0BACA,wDAGJ,sBAAKP,UAAU,wBAAf,UACE,yBAAQA,UAAU,2BAA2Bc,SAvB5B,SAACC,GACtBhB,EAAYgB,EAAEC,OAAOC,QAsBjB,UACE,wBAAQA,MAAM,GAAd,sCACA,wBAAQA,MAAM,OAAd,0BACA,wBAAQA,MAAM,gBAAd,6BAEF,uBAAOjB,UAAU,oBAAoBQ,KAAK,SAAUU,YAAY,eAAKJ,SAjCvD,SAACC,GACnBlB,EAASkB,EAAEC,OAAOC,aAkChB,sBAAKjB,UAAU,2BAAf,UACE,uBAAOA,UAAU,oBAAoBQ,KAAK,OAAOS,MAAM,qBAAME,UAAQ,IACrE,uBAAOnB,UAAU,sBAAsBQ,KAAK,OAAOS,MAAM,eAAKE,UAAQ,IACtE,uBAAOnB,UAAU,4BAA4BQ,KAAK,SAASW,UAAQ,IACnE,uBAAOnB,UAAU,qBAAqBQ,KAAK,OAAOS,MAAM,eAAKE,UAAQ,IACrE,uBAAOnB,UAAU,2BAA2BQ,KAAK,SAASW,UAAQ,OAEpE,4BAAG,wBAAQb,QAASb,EAAM2B,QAAvB,wBCjDF,SAASC,IAAe,IAAD,EACK1B,mBAAS,IAAI2B,MADlB,mBACnBC,EADmB,KACTC,EADS,OAEF7B,oBAAS,GAFP,mBAEnB8B,EAFmB,KAEbC,EAFa,OAGF/B,mBAAS,MAHP,mBAGnBM,EAHmB,KAGb0B,EAHa,KAgB1B,OACI,gCACE,cAAC,IAAD,CACEb,SAAUU,EACVP,MAAOM,EACPK,WAVW,SAACX,EAAOY,GACzBF,EAAQV,GACRS,GAAQ,MAUJ,8BACE,wBAAQpB,QAAUoB,EAAlB,8CAEDD,GACC,qBAAKK,GAAG,UAAR,SACE,cAAC,EAAD,CAAaV,QArBJ,WACjBO,EAAQ,MACRD,GAAQ,IAmBkCzB,KAAMA,SCjCtD,IAYe8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,EAAD,MAEFsB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbc6b416.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './ModalWindow.css';\n\n\nfunction formatDate(dt) {\n  const y = dt.getFullYear();\n  const m = ('00' + (dt.getMonth()+1)).slice(-2);\n  const d = ('00' + dt.getDate()).slice(-2);\n  return (y + '-' + m + '-' + d);\n}\nexport function ModalWindow(props){\n  const [price, setPrice] = useState(0);\n  const handleInput = (e) => {\n    setPrice(e.target.value)\n  }\n  \n  const [category, setCategory] = useState(\"\"); \n  const handleCategory = (e) => {\n    setCategory(e.target.value)\n  }\n  \n  const registerExpense = () => {\n    const obj = {\n      type: \"expense\", \n      price,\n      category\n    }\n    \n    window.localStorage.setItem(\"balance-management\", JSON.stringify([obj]))\n  }\n  \n  return (\n    <div className=\"ModalWindow-Content\">\n      <div className=\"ModalWindow-ButtonArea\">{ formatDate(props.date)}\n      　<div className=\"Expenditureincome\">\n          <button onClick={registerExpense}>支出</button>\n          <button>収入</button>\n        </div>\n      </div>\n      <div className=\"ModalWindow-InputArea\">\n        <select className=\"ModalWindow-CategoryArea\" onChange={handleCategory}>\n          <option value=\"\">カテゴリ</option>\n          <option value=\"food\">食費</option>\n          <option value=\"miscellaneous\">雑費</option>\n        </select>\n        <input className=\"ModalWindow-Input\" type=\"number\"  placeholder=\"金額\" onChange={handleInput}/>\n      </div>\n      <div className=\"ModalWindow-total-amount\">\n        <input className=\"ModalWindow-total\" type=\"text\" value=\"合計額\" disabled/>\n        <input className=\"ModalWindow-expense\" type=\"text\" value=\"支出\" disabled/>\n        <input className=\"ModalWindow-expense-total\" type=\"number\" disabled/>\n        <input className=\"ModalWindow-income\" type=\"text\" value=\"収入\" disabled/>\n        <input className=\"ModalWindow-income-total\" type=\"number\" disabled/>\n      </div>\n      <p><button onClick={props.onClose}>close</button></p>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { ModalWindow } from './ModalWindow';\n\nexport function AppCalendar() {\n    const [dateObj , setDateObj] = useState(new Date());\n    const [show, setShow] = useState(false);\n    const [date, setDate] = useState(null);\n    const showModal = () => {\n      setShow(true);\n    };\n    const closeModal = () => {\n      setDate(null);\n      setShow(false);\n    };\n    const onClickDay = (value, event) => {\n      setDate(value);\n      setShow(true);\n    };\n    \n    return (\n        <div>\n          <Calendar\n            onChange={setDateObj}\n            value={dateObj}\n            onClickDay={onClickDay} \n          />\n          <div>\n            <button onClick={ setShow }>全体の収支</button>\n          </div>\n          {show && (\n            <div id=\"overlay\">\n              <ModalWindow onClose={closeModal} date={date} />\n            </div>\n          )}\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {AppCalendar} from './Calendar';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppCalendar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}